//Atividade slides 
//O que √© l√≥gica de programa√ß√£o?

//Base para criar programas estruturados, resolvendo problemas com instru√ß√µes passo a passo.
//Node.js
//Plataforma para rodar JavaScript fora do navegador.
//Tipos de dados

//N√∫meros (inteiros e decimais), Strings (textos) e Booleanos (true/false).
//Vari√°veis (let e const)

//let pode mudar o valor, const √© fixa.
//Operadores

//Aritm√©ticos: +, -, *, /
//L√≥gicos: && (E), || (OU), ! (N√ÉO)
//Estruturas de controle (if e else)

//Decis√µes no c√≥digo baseadas em condi√ß√µes.
//Fun√ß√µes

//Blocos reutiliz√°veis de c√≥digo. Podem receber par√¢metros e retornar valores.
//Escopo de Vari√°veis

//Local (dentro de uma fun√ß√£o) e Global (pode ser acessada de qualquer lugar).

// Exerc√≠cio 1
let nome = "Gabi";
let idade = 15;
let chovendo = false;

console.log(typeof nome);      
console.log(typeof idade);    
console.log(typeof chovendo);  

// Exerc√≠cio 2 - C√°lculo da m√©dia
function media(num1, num2, num3) {
  return (num1 + num2 + num3) / 3;
}

let resultadoFinal = media(6, 10, 9);

if (resultadoFinal >= 7) {
  console.log("Aprovado");
} else {  // else if (resultadoFinal < 7) 
  console.log("Reprovado");
}

// Exerc√≠cio 3 - Verificar se est√° chovendo
let estaChovendo = true; 

if (estaChovendo) {  
  console.log("Est√° chovendo");
} else {
  console.log("N√£o est√° chovendo");
}

// Exerc√≠cio 4 - Fun√ß√£o que retorna o dobro
function dobro(num) {
  (return num * 2;)
}

console.log(dobro(5)); // Teste da fun√ß√£o

// Exerc√≠cio 5 - Verificar maioridade
let idadePessoa = 18;

if (idadePessoa === 18) {  
  console.log("Voc√™ tem 18 anos");
} else if (idadePessoa > 18) {
  console.log("Voc√™ tem mais de 18 anos ");
}

// Exerc√≠cio 6 - Cumprimentar a pessoa
function cumprimentar(nome, idade) {
  console.log(`Ol√°, ${nome}!`);  
  console.log(`Idade: ${idade}`); 
}

cumprimentar("Gabi üíã‚ú®", 15); 


//objeto{propriedades: '' e pode ter listas ou m√©todo-fun√ß√µes}
const estudante = {
    nome:"Melissa",
    idade:15,
    prontuario:12345,
    bolsista:true,
    telefones: ["1234-5678","8769-098"],
    endereco:[{
        rua:"Nome da rua",
        numero:"12",
        bairro:"Santa Cruz"
    },
    {
        rua:"Nome da rua",
        numero:"12",
        bairro:"Santa Cruz"   
    }]
}


//verificar se existe a propriedade endere√ßo
const chaveObjeto = Object.keys(estudante)//vai voltar string e n√£o objeto 
console.log("", chaveObjeto)//aq retorna s√≥ as propriedades

if (!chaveObjeto.includes("endereco")){//se a propriedade end n√£o existe - a exclam√ß√£o √© o 'n√£o'
    console.error("√â necess√°rio ter um endere√ßo cadastrado")//mensagem de erro
}else {
    console.log("Endere√ßo cadastrado")
}


console.log(typeof estudante) //verifica o tipo de dados 
console.log(estudante)

console.log(estudante.telefones)//lista de telefones
console.log(estudante.telefones[0])//lista de telefone do √≠ndice 0 

console.log(estudante.idade)
console.log(estudante["idade"])

//adicionar um objeto dentro de outro objeto 
estudante.endereco={
    rua:"Nome da rua",
    numero:"12",
    bairro:"Santa Cruz"
}
console.log(estudante)
console.log(estudante.endereco.bairro)

function concatenarArray(array1,array2){
  return array1.concat(array2);//concat serve para unir os dois arrays em um s√≥ e retorna o valor 
}

const numeros=[1,2,3,4,5,6,7,8,9,10];
const parteNum=numeros.slice(3,8)//o slice pega os elementos do √≠ndice 3 at√© o 7 (inicio, fim)
console.log(parteNum);

const frutas = ['Ma√ß√£', 'Banana', 'Laranja', 'Lim√£o', 'Abacaxi']
frutas.splice(2,2,'Kiwi', 'P√™ssego')//remove ou adiciona elementos
console.log(frutas);

const menuPrincipal=['Lasanha','Pizza', 'Hamburguer']
const menuSobremesas=['Pudim', 'Sorvete','Torta de ma√ß√£']
const menuCompleto = menuPrincipal.concat(menuSobremesas);
console.log(menuCompleto) 

